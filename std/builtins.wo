@name("Log") export builtin Log(val: string): void;

@name("i8") export builtin i8<T>(val: T): i8;
@name("i8") export builtin u8<T>(val: T): u8;
@name("i16") export builtin i16<T>(val: T): i16;
@name("u16") export builtin u16<T>(val: T): u16;
@name("i32") export builtin i32<T>(val: T): i32;
@name("u32") export builtin u32<T>(val: T): u32;
@name("i64") export builtin i64<T>(val: T): i64;
@name("u64") export builtin u64<T>(val: T): u64;
@name("isize") export builtin isize<T>(val: T): isize;
@name("usize") export builtin usize<T>(val: T): usize;
@name("f32") export builtin f32<T>(val: T): f32;
@name("f64") export builtin f64<T>(val: T): f64;

export namespace heap {
  @name("malloc") export builtin malloc(size: usize): usize;
  @name("free") export builtin free<T>(ptr: T): void;
}

export namespace stack {
  @name("alloca") export builtin alloca(size: usize): usize;
}

export namespace memory {
  @name("store") export builtin store<T>(ptr: usize, value: T): void;
  @name("load") export builtin load<T>(ptr: usize): T;
  @name("ptr") export builtin ptr<T>(ref: T): usize;
}

export namespace types {
  @name("types.is") export builtin is<T, U>(): bool;
  @name("types.isAssignableTo") export builtin isAssignableTo<T, U>(): bool;
  @name("types.idOf") export builtin idOf<T>(): u32;
  @name("types.sizeOf") export builtin sizeOf<T>(val: T): usize;
}

export namespace ensure {
  @name("ensure.compiled") export builtin compiled<T>(val: T): T;
}

// compiler intrinsics
@name("AShr") export builtin AShr<T>(value: T, bits: T): T; // AShr(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
@name("Add") export builtin Add<T>(lhs: T, rhs: T): T; // Add(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
@name("And") export builtin And<T>(lhs: T, rhs: T): T; // And(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("AtomicCmpXchg") export builtin AtomicCmpXchg(): void; // AtomicCmpXchg(Builder: LLVMBuilderRef, Ptr: LLVMValueRef, Cmp: LLVMValueRef, New: LLVMValueRef, SuccessOrdering: LLVMAtomicOrdering, FailureOrdering: LLVMAtomicOrdering, SingleThread: LLVMBool): LLVMValueRef;
// @name("AtomicRMW") export builtin AtomicRMW(): void; // AtomicRMW(Builder: LLVMBuilderRef, op: LLVMAtomicRMWBinOp, PTR: LLVMValueRef, Val: LLVMValueRef, ordering: LLVMAtomicOrdering, singleThread: LLVMBool): LLVMValueRef;
@name("FAdd") export builtin FAdd<T>(lhs: T, rhs: T): T; // FAdd(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FCmp") export builtin FCmp(): void; // FCmp(Builder: LLVMBuilderRef, Op: LLVMRealPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FDiv") export builtin FDiv(): void; // FDiv(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FMul") export builtin FMul(): void; // FMul(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FNeg") export builtin FNeg(): void; // FNeg(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FPCast") export builtin FPCast(): void; // FPCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FPExt") export builtin FPExt(): void; // FPExt(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FPToSI") export builtin FPToSI(): void; // FPToSI(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FPToUI") export builtin FPToUI(): void; // FPToUI(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FPTrunc") export builtin FPTrunc(): void; // FPTrunc(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FRem") export builtin FRem(): void; // FRem(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("FSub") export builtin FSub(): void; // FSub(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Fence") export builtin Fence(): void; // Fence(Builder: LLVMBuilderRef, ordering: LLVMAtomicOrdering, singleThread: LLVMBool, Name: LLVMStringRef): LLVMValueRef;
// @name("Freeze") export builtin Freeze(): void; // Freeze(Builder: LLVMBuilderRef, Val: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("GEP2") export builtin GEP2(): void; // GEP2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: Pointer<LLVMValueRef[]>, NumIndices: number, Name: LLVMStringRef): LLVMValueRef;
// @name("ICmp") export builtin ICmp(): void; // ICmp(Builder: LLVMBuilderRef, Op: LLVMIntPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("InBoundsGEP2") export builtin InBoundsGEP2(): void; // InBoundsGEP2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: Pointer<LLVMValueRef[]>, NumIndices: number, Name: LLVMStringRef): LLVMValueRef;
// @name("IndirectBr") export builtin IndirectBr(): void; // IndirectBr(Builder: LLVMBuilderRef, Addr: LLVMValueRef, NumDests: number): LLVMValueRef;
// @name("InsertElement") export builtin InsertElement(): void; // InsertElement(Builder: LLVMBuilderRef, VecVal: LLVMValueRef, EltVal: LLVMValueRef, Index: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("InsertValue") export builtin InsertValue(): void; // InsertValue(Builder: LLVMBuilderRef, AggVal: LLVMValueRef, EltVal: LLVMValueRef, Index: number, Name: LLVMStringRef): LLVMValueRef;
// @name("IntCast") export builtin IntCast(): void; // IntCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("IntCast2") export builtin IntCast2(): void; // IntCast2(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, IsSigned: LLVMBool, Name: LLVMStringRef): LLVMValueRef;
// @name("IntToPtr") export builtin IntToPtr(): void; // IntToPtr(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Invoke2") export builtin Invoke2(): void; // Invoke2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: Pointer<LLVMValueRef[]>, NumArgs: number, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Name: LLVMStringRef): LLVMValueRef;
// @name("IsNotNull") export builtin IsNotNull(): void; // IsNotNull(Builder: LLVMBuilderRef, Val: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("IsNull") export builtin IsNull(): void; // IsNull(Builder: LLVMBuilderRef, Val: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("LShr") export builtin LShr(): void; // LShr(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("LandingPad") export builtin LandingPad(): void; // LandingPad(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, PersFn: LLVMValueRef, NumClauses: number, Name: LLVMStringRef): LLVMValueRef;
// @name("Load2") export builtin Load2(): void; // Load2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, PointerVal: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("MemMove") export builtin MemMove(): void; // MemMove(Builder: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: number, Src: LLVMValueRef, SrcAlign: number, Size: LLVMValueRef): LLVMValueRef;
// @name("MemSet") export builtin MemSet(): void; // MemSet(Builder: LLVMBuilderRef, Ptr: LLVMValueRef, Val: LLVMValueRef, Len: LLVMValueRef, Align: number): LLVMValueRef;
@name("Mul") export builtin Mul<T>(lhs: T, rhs: T): T; // Mul(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("NSWAdd") export builtin NSWAdd(): void; // NSWAdd(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("NSWMul") export builtin NSWMul(): void; // NSWMul(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("NSWNeg") export builtin NSWNeg(): void; // NSWNeg(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("NSWSub") export builtin NSWSub(): void; // NSWSub(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("NUWAdd") export builtin NUWAdd(): void; // NUWAdd(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("NUWMul") export builtin NUWMul(): void; // NUWMul(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("NUWNeg") export builtin NUWNeg(): void; // NUWNeg(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("NUWSub") export builtin NUWSub(): void; // NUWSub(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Neg") export builtin Neg(): void; // Neg(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Not") export builtin Not(): void; // Not(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Or") export builtin Or(): void; // Or(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Phi") export builtin Phi(): void; // Phi(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("PointerCast") export builtin PointerCast(): void; // PointerCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("PtrDiff2") export builtin PtrDiff2(): void; // PtrDiff2(Builder: LLVMBuilderRef, ElemTy: LLVMTypeRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("PtrToInt") export builtin PtrToInt(): void; // PtrToInt(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Resume") export builtin Resume(): void; // Resume(Builder: LLVMBuilderRef, Exn: LLVMValueRef): LLVMValueRef;
// @name("Ret") export builtin Ret(): void; // Ret(Builder: LLVMBuilderRef, V: LLVMValueRef): LLVMValueRef;
// @name("RetVoid") export builtin RetVoid(): void; // RetVoid(Builder: LLVMBuilderRef): LLVMValueRef;
// @name("SDiv") export builtin SDiv(): void; // SDiv(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("SExt") export builtin SExt(): void; // SExt(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("SExtOrBitCast") export builtin SExtOrBitCast(): void; // SExtOrBitCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("SIToFP") export builtin SIToFP(): void; // SIToFP(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("SRem") export builtin SRem(): void; // SRem(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
@name("Select") export builtin Select<T>(cond: bool, then: T, otherwise: T): T; // Select(Builder: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMValueRef, Else: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Shl") export builtin Shl(): void; // Shl(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("ShuffleVector") export builtin ShuffleVector(): void; // ShuffleVector(Builder: LLVMBuilderRef, V1: LLVMValueRef, V2: LLVMValueRef, Mask: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("StructGEP2") export builtin StructGEP2(): void; // StructGEP2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Idx: number, Name: LLVMStringRef): LLVMValueRef;
@name("Sub") export builtin Sub<T>(lhs: T, rhs: T): T; // Sub(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Switch") export builtin Switch(): void; // Switch(Builder: LLVMBuilderRef, V: LLVMValueRef, Else: LLVMBasicBlockRef, NumCases: number): LLVMValueRef;
// @name("Trunc") export builtin Trunc(): void; // Trunc(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("TruncOrBitCast") export builtin TruncOrBitCast(): void; // TruncOrBitCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("UDiv") export builtin UDiv(): void; // UDiv(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("UIToFP") export builtin UIToFP(): void; // UIToFP(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("URem") export builtin URem(): void; // URem(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
@name("Unreachable") export builtin Unreachable(): void; // Unreachable(Builder: LLVMBuilderRef): LLVMValueRef;
// @name("VAArg") export builtin VAArg(): void; // VAArg(Builder: LLVMBuilderRef, List: LLVMValueRef, Ty: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("Xor") export builtin Xor(): void; // Xor(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
// @name("ZExt") export builtin ZExt(): void; // ZExt(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
// @name("ZExtOrBitCast") export builtin ZExtOrBitCast(): void; // ZExtOrBitCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;

@name("isString") export builtin isString<T>(val: T): bool;
