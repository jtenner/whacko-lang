export class Array<T> {
  buffer: ArrayBuffer;
  length: usize;
  constructor(capacity: usize) {
    this.buffer = gc.alloc(
      types.typeOf<ArrayBuffer>(),
      capacity * (
        types.isReference<T>()
          ? types.sizeOf<usize>()
          : types.sizeOf<T>()
      )
    );

    this.length = usize(0);
  }

  __gc_visit(): void {
    if (types.isReference<T>()) {
      let i = usize(0);
      let length = this.length;
      let elements = types.ptr(this.buffer);

      while (i < length) {
        gc.visit(elements + i * types.sizeOf<usize>());
        i++;
      }
    }
  }
}
