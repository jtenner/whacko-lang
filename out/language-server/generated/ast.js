"use strict";
/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFalseLiteral = exports.FalseLiteral = exports.isExportDeclarator = exports.ExportDeclarator = exports.isDeclaration = exports.Declaration = exports.isConstructorClassMember = exports.ConstructorClassMember = exports.isClassMember = exports.ClassMember = exports.isCallPath = exports.CallPath = exports.isBinaryLiteral = exports.BinaryLiteral = exports.isBinaryExpression = exports.BinaryExpression = exports.isAsyncBlockLiteral = exports.AsyncBlockLiteral = exports.isArrayAccessPath = exports.ArrayAccessPath = exports.isTypeExpression = exports.TypeExpression = exports.isSumExpression = exports.SumExpression = exports.isProductExpression = exports.ProductExpression = exports.isPrimaryExpression = exports.PrimaryExpression = exports.isLogicalOrExpression = exports.LogicalOrExpression = exports.isLogicalAndExpression = exports.LogicalAndExpression = exports.isExpression = exports.Expression = exports.isExponentiationExpression = exports.ExponentiationExpression = exports.isEqualityExpression = exports.EqualityExpression = exports.isComaprisonExpression = exports.ComaprisonExpression = exports.isBitwiseXOrExpression = exports.BitwiseXOrExpression = exports.isBitwiseOrExpression = exports.BitwiseOrExpression = exports.isBitwiseAndExpression = exports.BitwiseAndExpression = exports.isBitShiftExpression = exports.BitShiftExpression = exports.isAssignmentExpression = exports.AssignmentExpression = void 0;
exports.isTrueLiteral = exports.TrueLiteral = exports.isThisLiteral = exports.ThisLiteral = exports.isSuperLiteral = exports.SuperLiteral = exports.isStringLiteral = exports.StringLiteral = exports.isStatement = exports.Statement = exports.isSetterClassMember = exports.SetterClassMember = exports.isProgram = exports.Program = exports.isParameter = exports.Parameter = exports.isOctalLiteral = exports.OctalLiteral = exports.isNullLiteral = exports.NullLiteral = exports.isNewPath = exports.NewPath = exports.isNamedTypeExpression = exports.NamedTypeExpression = exports.isMethodClassMember = exports.MethodClassMember = exports.isMemberAccessPath = exports.MemberAccessPath = exports.isLeftUnaryExpression = exports.LeftUnaryExpression = exports.isIntegerLiteral = exports.IntegerLiteral = exports.isImportDeclarator = exports.ImportDeclarator = exports.isID = exports.ID = exports.isHexLiteral = exports.HexLiteral = exports.isHeldTypeExpression = exports.HeldTypeExpression = exports.isGroupLiteral = exports.GroupLiteral = exports.isGetterClassMember = exports.GetterClassMember = exports.isFunctionTypeExpression = exports.FunctionTypeExpression = exports.isFloatLiteral = exports.FloatLiteral = exports.isFieldClassMember = exports.FieldClassMember = void 0;
exports.reflection = exports.WhackoAstReflection = exports.isPathExpression = exports.PathExpression = exports.isTernaryExpression = exports.TernaryExpression = exports.isHoldExpression = exports.HoldExpression = exports.isYieldExpression = exports.YieldExpression = exports.isAwaitExpression = exports.AwaitExpression = exports.isVariableDeclarator = exports.VariableDeclarator = exports.isTupleTypeExpression = exports.TupleTypeExpression = exports.isTupleExpression = exports.TupleExpression = void 0;
/* eslint-disable */
const langium_1 = require("langium");
exports.AssignmentExpression = 'AssignmentExpression';
function isAssignmentExpression(item) {
    return exports.reflection.isInstance(item, exports.AssignmentExpression);
}
exports.isAssignmentExpression = isAssignmentExpression;
exports.BitShiftExpression = 'BitShiftExpression';
function isBitShiftExpression(item) {
    return exports.reflection.isInstance(item, exports.BitShiftExpression);
}
exports.isBitShiftExpression = isBitShiftExpression;
exports.BitwiseAndExpression = 'BitwiseAndExpression';
function isBitwiseAndExpression(item) {
    return exports.reflection.isInstance(item, exports.BitwiseAndExpression);
}
exports.isBitwiseAndExpression = isBitwiseAndExpression;
exports.BitwiseOrExpression = 'BitwiseOrExpression';
function isBitwiseOrExpression(item) {
    return exports.reflection.isInstance(item, exports.BitwiseOrExpression);
}
exports.isBitwiseOrExpression = isBitwiseOrExpression;
exports.BitwiseXOrExpression = 'BitwiseXOrExpression';
function isBitwiseXOrExpression(item) {
    return exports.reflection.isInstance(item, exports.BitwiseXOrExpression);
}
exports.isBitwiseXOrExpression = isBitwiseXOrExpression;
exports.ComaprisonExpression = 'ComaprisonExpression';
function isComaprisonExpression(item) {
    return exports.reflection.isInstance(item, exports.ComaprisonExpression);
}
exports.isComaprisonExpression = isComaprisonExpression;
exports.EqualityExpression = 'EqualityExpression';
function isEqualityExpression(item) {
    return exports.reflection.isInstance(item, exports.EqualityExpression);
}
exports.isEqualityExpression = isEqualityExpression;
exports.ExponentiationExpression = 'ExponentiationExpression';
function isExponentiationExpression(item) {
    return exports.reflection.isInstance(item, exports.ExponentiationExpression);
}
exports.isExponentiationExpression = isExponentiationExpression;
exports.Expression = 'Expression';
function isExpression(item) {
    return exports.reflection.isInstance(item, exports.Expression);
}
exports.isExpression = isExpression;
exports.LogicalAndExpression = 'LogicalAndExpression';
function isLogicalAndExpression(item) {
    return exports.reflection.isInstance(item, exports.LogicalAndExpression);
}
exports.isLogicalAndExpression = isLogicalAndExpression;
exports.LogicalOrExpression = 'LogicalOrExpression';
function isLogicalOrExpression(item) {
    return exports.reflection.isInstance(item, exports.LogicalOrExpression);
}
exports.isLogicalOrExpression = isLogicalOrExpression;
exports.PrimaryExpression = 'PrimaryExpression';
function isPrimaryExpression(item) {
    return exports.reflection.isInstance(item, exports.PrimaryExpression);
}
exports.isPrimaryExpression = isPrimaryExpression;
exports.ProductExpression = 'ProductExpression';
function isProductExpression(item) {
    return exports.reflection.isInstance(item, exports.ProductExpression);
}
exports.isProductExpression = isProductExpression;
exports.SumExpression = 'SumExpression';
function isSumExpression(item) {
    return exports.reflection.isInstance(item, exports.SumExpression);
}
exports.isSumExpression = isSumExpression;
exports.TypeExpression = 'TypeExpression';
function isTypeExpression(item) {
    return exports.reflection.isInstance(item, exports.TypeExpression);
}
exports.isTypeExpression = isTypeExpression;
exports.ArrayAccessPath = 'ArrayAccessPath';
function isArrayAccessPath(item) {
    return exports.reflection.isInstance(item, exports.ArrayAccessPath);
}
exports.isArrayAccessPath = isArrayAccessPath;
exports.AsyncBlockLiteral = 'AsyncBlockLiteral';
function isAsyncBlockLiteral(item) {
    return exports.reflection.isInstance(item, exports.AsyncBlockLiteral);
}
exports.isAsyncBlockLiteral = isAsyncBlockLiteral;
exports.BinaryExpression = 'BinaryExpression';
function isBinaryExpression(item) {
    return exports.reflection.isInstance(item, exports.BinaryExpression);
}
exports.isBinaryExpression = isBinaryExpression;
exports.BinaryLiteral = 'BinaryLiteral';
function isBinaryLiteral(item) {
    return exports.reflection.isInstance(item, exports.BinaryLiteral);
}
exports.isBinaryLiteral = isBinaryLiteral;
exports.CallPath = 'CallPath';
function isCallPath(item) {
    return exports.reflection.isInstance(item, exports.CallPath);
}
exports.isCallPath = isCallPath;
exports.ClassMember = 'ClassMember';
function isClassMember(item) {
    return exports.reflection.isInstance(item, exports.ClassMember);
}
exports.isClassMember = isClassMember;
exports.ConstructorClassMember = 'ConstructorClassMember';
function isConstructorClassMember(item) {
    return exports.reflection.isInstance(item, exports.ConstructorClassMember);
}
exports.isConstructorClassMember = isConstructorClassMember;
exports.Declaration = 'Declaration';
function isDeclaration(item) {
    return exports.reflection.isInstance(item, exports.Declaration);
}
exports.isDeclaration = isDeclaration;
exports.ExportDeclarator = 'ExportDeclarator';
function isExportDeclarator(item) {
    return exports.reflection.isInstance(item, exports.ExportDeclarator);
}
exports.isExportDeclarator = isExportDeclarator;
exports.FalseLiteral = 'FalseLiteral';
function isFalseLiteral(item) {
    return exports.reflection.isInstance(item, exports.FalseLiteral);
}
exports.isFalseLiteral = isFalseLiteral;
exports.FieldClassMember = 'FieldClassMember';
function isFieldClassMember(item) {
    return exports.reflection.isInstance(item, exports.FieldClassMember);
}
exports.isFieldClassMember = isFieldClassMember;
exports.FloatLiteral = 'FloatLiteral';
function isFloatLiteral(item) {
    return exports.reflection.isInstance(item, exports.FloatLiteral);
}
exports.isFloatLiteral = isFloatLiteral;
exports.FunctionTypeExpression = 'FunctionTypeExpression';
function isFunctionTypeExpression(item) {
    return exports.reflection.isInstance(item, exports.FunctionTypeExpression);
}
exports.isFunctionTypeExpression = isFunctionTypeExpression;
exports.GetterClassMember = 'GetterClassMember';
function isGetterClassMember(item) {
    return exports.reflection.isInstance(item, exports.GetterClassMember);
}
exports.isGetterClassMember = isGetterClassMember;
exports.GroupLiteral = 'GroupLiteral';
function isGroupLiteral(item) {
    return exports.reflection.isInstance(item, exports.GroupLiteral);
}
exports.isGroupLiteral = isGroupLiteral;
exports.HeldTypeExpression = 'HeldTypeExpression';
function isHeldTypeExpression(item) {
    return exports.reflection.isInstance(item, exports.HeldTypeExpression);
}
exports.isHeldTypeExpression = isHeldTypeExpression;
exports.HexLiteral = 'HexLiteral';
function isHexLiteral(item) {
    return exports.reflection.isInstance(item, exports.HexLiteral);
}
exports.isHexLiteral = isHexLiteral;
exports.ID = 'ID';
function isID(item) {
    return exports.reflection.isInstance(item, exports.ID);
}
exports.isID = isID;
exports.ImportDeclarator = 'ImportDeclarator';
function isImportDeclarator(item) {
    return exports.reflection.isInstance(item, exports.ImportDeclarator);
}
exports.isImportDeclarator = isImportDeclarator;
exports.IntegerLiteral = 'IntegerLiteral';
function isIntegerLiteral(item) {
    return exports.reflection.isInstance(item, exports.IntegerLiteral);
}
exports.isIntegerLiteral = isIntegerLiteral;
exports.LeftUnaryExpression = 'LeftUnaryExpression';
function isLeftUnaryExpression(item) {
    return exports.reflection.isInstance(item, exports.LeftUnaryExpression);
}
exports.isLeftUnaryExpression = isLeftUnaryExpression;
exports.MemberAccessPath = 'MemberAccessPath';
function isMemberAccessPath(item) {
    return exports.reflection.isInstance(item, exports.MemberAccessPath);
}
exports.isMemberAccessPath = isMemberAccessPath;
exports.MethodClassMember = 'MethodClassMember';
function isMethodClassMember(item) {
    return exports.reflection.isInstance(item, exports.MethodClassMember);
}
exports.isMethodClassMember = isMethodClassMember;
exports.NamedTypeExpression = 'NamedTypeExpression';
function isNamedTypeExpression(item) {
    return exports.reflection.isInstance(item, exports.NamedTypeExpression);
}
exports.isNamedTypeExpression = isNamedTypeExpression;
exports.NewPath = 'NewPath';
function isNewPath(item) {
    return exports.reflection.isInstance(item, exports.NewPath);
}
exports.isNewPath = isNewPath;
exports.NullLiteral = 'NullLiteral';
function isNullLiteral(item) {
    return exports.reflection.isInstance(item, exports.NullLiteral);
}
exports.isNullLiteral = isNullLiteral;
exports.OctalLiteral = 'OctalLiteral';
function isOctalLiteral(item) {
    return exports.reflection.isInstance(item, exports.OctalLiteral);
}
exports.isOctalLiteral = isOctalLiteral;
exports.Parameter = 'Parameter';
function isParameter(item) {
    return exports.reflection.isInstance(item, exports.Parameter);
}
exports.isParameter = isParameter;
exports.Program = 'Program';
function isProgram(item) {
    return exports.reflection.isInstance(item, exports.Program);
}
exports.isProgram = isProgram;
exports.SetterClassMember = 'SetterClassMember';
function isSetterClassMember(item) {
    return exports.reflection.isInstance(item, exports.SetterClassMember);
}
exports.isSetterClassMember = isSetterClassMember;
exports.Statement = 'Statement';
function isStatement(item) {
    return exports.reflection.isInstance(item, exports.Statement);
}
exports.isStatement = isStatement;
exports.StringLiteral = 'StringLiteral';
function isStringLiteral(item) {
    return exports.reflection.isInstance(item, exports.StringLiteral);
}
exports.isStringLiteral = isStringLiteral;
exports.SuperLiteral = 'SuperLiteral';
function isSuperLiteral(item) {
    return exports.reflection.isInstance(item, exports.SuperLiteral);
}
exports.isSuperLiteral = isSuperLiteral;
exports.ThisLiteral = 'ThisLiteral';
function isThisLiteral(item) {
    return exports.reflection.isInstance(item, exports.ThisLiteral);
}
exports.isThisLiteral = isThisLiteral;
exports.TrueLiteral = 'TrueLiteral';
function isTrueLiteral(item) {
    return exports.reflection.isInstance(item, exports.TrueLiteral);
}
exports.isTrueLiteral = isTrueLiteral;
exports.TupleExpression = 'TupleExpression';
function isTupleExpression(item) {
    return exports.reflection.isInstance(item, exports.TupleExpression);
}
exports.isTupleExpression = isTupleExpression;
exports.TupleTypeExpression = 'TupleTypeExpression';
function isTupleTypeExpression(item) {
    return exports.reflection.isInstance(item, exports.TupleTypeExpression);
}
exports.isTupleTypeExpression = isTupleTypeExpression;
exports.VariableDeclarator = 'VariableDeclarator';
function isVariableDeclarator(item) {
    return exports.reflection.isInstance(item, exports.VariableDeclarator);
}
exports.isVariableDeclarator = isVariableDeclarator;
exports.AwaitExpression = 'AwaitExpression';
function isAwaitExpression(item) {
    return exports.reflection.isInstance(item, exports.AwaitExpression);
}
exports.isAwaitExpression = isAwaitExpression;
exports.YieldExpression = 'YieldExpression';
function isYieldExpression(item) {
    return exports.reflection.isInstance(item, exports.YieldExpression);
}
exports.isYieldExpression = isYieldExpression;
exports.HoldExpression = 'HoldExpression';
function isHoldExpression(item) {
    return exports.reflection.isInstance(item, exports.HoldExpression);
}
exports.isHoldExpression = isHoldExpression;
exports.TernaryExpression = 'TernaryExpression';
function isTernaryExpression(item) {
    return exports.reflection.isInstance(item, exports.TernaryExpression);
}
exports.isTernaryExpression = isTernaryExpression;
exports.PathExpression = 'PathExpression';
function isPathExpression(item) {
    return exports.reflection.isInstance(item, exports.PathExpression);
}
exports.isPathExpression = isPathExpression;
class WhackoAstReflection extends langium_1.AbstractAstReflection {
    getAllTypes() {
        return ['ArrayAccessPath', 'AssignmentExpression', 'AsyncBlockLiteral', 'AwaitExpression', 'BinaryExpression', 'BinaryLiteral', 'BitShiftExpression', 'BitwiseAndExpression', 'BitwiseOrExpression', 'BitwiseXOrExpression', 'CallPath', 'ClassMember', 'ComaprisonExpression', 'ConstructorClassMember', 'Declaration', 'EqualityExpression', 'ExponentiationExpression', 'ExportDeclarator', 'Expression', 'FalseLiteral', 'FieldClassMember', 'FloatLiteral', 'FunctionTypeExpression', 'GetterClassMember', 'GroupLiteral', 'HeldTypeExpression', 'HexLiteral', 'HoldExpression', 'ID', 'ImportDeclarator', 'IntegerLiteral', 'LeftUnaryExpression', 'LogicalAndExpression', 'LogicalOrExpression', 'MemberAccessPath', 'MethodClassMember', 'NamedTypeExpression', 'NewPath', 'NullLiteral', 'OctalLiteral', 'Parameter', 'PathExpression', 'PrimaryExpression', 'ProductExpression', 'Program', 'SetterClassMember', 'Statement', 'StringLiteral', 'SumExpression', 'SuperLiteral', 'TernaryExpression', 'ThisLiteral', 'TrueLiteral', 'TupleExpression', 'TupleTypeExpression', 'TypeExpression', 'VariableDeclarator', 'YieldExpression'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case exports.AsyncBlockLiteral:
            case exports.BinaryLiteral:
            case exports.FalseLiteral:
            case exports.FloatLiteral:
            case exports.GroupLiteral:
            case exports.HexLiteral:
            case exports.ID:
            case exports.IntegerLiteral:
            case exports.NullLiteral:
            case exports.OctalLiteral:
            case exports.StringLiteral:
            case exports.SuperLiteral:
            case exports.ThisLiteral:
            case exports.TrueLiteral: {
                return this.isSubtype(exports.PrimaryExpression, supertype);
            }
            case exports.BinaryExpression: {
                return this.isSubtype(exports.AssignmentExpression, supertype) || this.isSubtype(exports.LogicalOrExpression, supertype) || this.isSubtype(exports.LogicalAndExpression, supertype) || this.isSubtype(exports.BitwiseOrExpression, supertype) || this.isSubtype(exports.BitwiseXOrExpression, supertype) || this.isSubtype(exports.BitwiseAndExpression, supertype) || this.isSubtype(exports.EqualityExpression, supertype) || this.isSubtype(exports.ComaprisonExpression, supertype) || this.isSubtype(exports.BitShiftExpression, supertype) || this.isSubtype(exports.SumExpression, supertype) || this.isSubtype(exports.ProductExpression, supertype) || this.isSubtype(exports.ExponentiationExpression, supertype);
            }
            case exports.FunctionTypeExpression:
            case exports.HeldTypeExpression:
            case exports.NamedTypeExpression:
            case exports.TupleTypeExpression: {
                return this.isSubtype(exports.TypeExpression, supertype);
            }
            case exports.LeftUnaryExpression: {
                return this.isSubtype(exports.ExponentiationExpression, supertype);
            }
            case exports.TupleExpression: {
                return this.isSubtype(exports.Expression, supertype);
            }
            case exports.AwaitExpression: {
                return this.isSubtype(exports.LeftUnaryExpression, supertype);
            }
            case exports.YieldExpression: {
                return this.isSubtype(exports.TupleExpression, supertype);
            }
            case exports.HoldExpression: {
                return this.isSubtype(exports.AwaitExpression, supertype);
            }
            case exports.TernaryExpression: {
                return this.isSubtype(exports.YieldExpression, supertype);
            }
            case exports.PathExpression: {
                return this.isSubtype(exports.AssignmentExpression, supertype) || this.isSubtype(exports.HoldExpression, supertype);
            }
            case exports.AssignmentExpression: {
                return this.isSubtype(exports.TernaryExpression, supertype);
            }
            case exports.BitShiftExpression: {
                return this.isSubtype(exports.ComaprisonExpression, supertype);
            }
            case exports.BitwiseAndExpression: {
                return this.isSubtype(exports.BitwiseXOrExpression, supertype);
            }
            case exports.BitwiseOrExpression: {
                return this.isSubtype(exports.LogicalAndExpression, supertype);
            }
            case exports.BitwiseXOrExpression: {
                return this.isSubtype(exports.BitwiseOrExpression, supertype);
            }
            case exports.ComaprisonExpression: {
                return this.isSubtype(exports.EqualityExpression, supertype);
            }
            case exports.EqualityExpression: {
                return this.isSubtype(exports.BitwiseAndExpression, supertype);
            }
            case exports.ExponentiationExpression: {
                return this.isSubtype(exports.ProductExpression, supertype);
            }
            case exports.LogicalAndExpression: {
                return this.isSubtype(exports.LogicalOrExpression, supertype);
            }
            case exports.LogicalOrExpression: {
                return this.isSubtype(exports.AssignmentExpression, supertype);
            }
            case exports.PrimaryExpression: {
                return this.isSubtype(exports.PathExpression, supertype);
            }
            case exports.ProductExpression: {
                return this.isSubtype(exports.SumExpression, supertype);
            }
            case exports.SumExpression: {
                return this.isSubtype(exports.BitShiftExpression, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'AsyncBlockLiteral': {
                return {
                    name: 'AsyncBlockLiteral',
                    mandatory: [
                        { name: 'statements', type: 'array' }
                    ]
                };
            }
            case 'CallPath': {
                return {
                    name: 'CallPath',
                    mandatory: [
                        { name: 'typeParameters', type: 'array' }
                    ]
                };
            }
            case 'ClassMember': {
                return {
                    name: 'ClassMember',
                    mandatory: [
                        { name: 'members', type: 'array' }
                    ]
                };
            }
            case 'ConstructorClassMember': {
                return {
                    name: 'ConstructorClassMember',
                    mandatory: [
                        { name: 'parameters', type: 'array' }
                    ]
                };
            }
            case 'Declaration': {
                return {
                    name: 'Declaration',
                    mandatory: [
                        { name: 'declarators', type: 'array' },
                        { name: 'members', type: 'array' },
                        { name: 'parameters', type: 'array' }
                    ]
                };
            }
            case 'FunctionTypeExpression': {
                return {
                    name: 'FunctionTypeExpression',
                    mandatory: [
                        { name: 'parameters', type: 'array' }
                    ]
                };
            }
            case 'MethodClassMember': {
                return {
                    name: 'MethodClassMember',
                    mandatory: [
                        { name: 'parameters', type: 'array' }
                    ]
                };
            }
            case 'NamedTypeExpression': {
                return {
                    name: 'NamedTypeExpression',
                    mandatory: [
                        { name: 'typeParameters', type: 'array' }
                    ]
                };
            }
            case 'NewPath': {
                return {
                    name: 'NewPath',
                    mandatory: [
                        { name: 'parameters', type: 'array' },
                        { name: 'typeParameters', type: 'array' }
                    ]
                };
            }
            case 'Program': {
                return {
                    name: 'Program',
                    mandatory: [
                        { name: 'declarations', type: 'array' },
                        { name: 'exports', type: 'array' },
                        { name: 'imports', type: 'array' }
                    ]
                };
            }
            case 'Statement': {
                return {
                    name: 'Statement',
                    mandatory: [
                        { name: 'declarators', type: 'array' },
                        { name: 'statements', type: 'array' }
                    ]
                };
            }
            case 'TupleExpression': {
                return {
                    name: 'TupleExpression',
                    mandatory: [
                        { name: 'expressions', type: 'array' }
                    ]
                };
            }
            case 'TupleTypeExpression': {
                return {
                    name: 'TupleTypeExpression',
                    mandatory: [
                        { name: 'types', type: 'array' }
                    ]
                };
            }
            case 'YieldExpression': {
                return {
                    name: 'YieldExpression',
                    mandatory: [
                        { name: 'expressions', type: 'array' }
                    ]
                };
            }
            case 'TernaryExpression': {
                return {
                    name: 'TernaryExpression',
                    mandatory: [
                        { name: 'expressions', type: 'array' }
                    ]
                };
            }
            case 'PathExpression': {
                return {
                    name: 'PathExpression',
                    mandatory: [
                        { name: 'path', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.WhackoAstReflection = WhackoAstReflection;
exports.reflection = new WhackoAstReflection();
//# sourceMappingURL=ast.js.map